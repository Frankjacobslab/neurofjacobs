"""
Kallisto analysis from mRNA-Seq fastq files
"""

################
## Configuration
################

#config
configfile: "config.yaml"

# directory that contains original fastq files
FQ_DIR = config["fastqdir"]
SAMPLES = config["samples"]


# Reference fasta files
REF = config["refseqs"]["repeatsfasta"]
REF_BASENAME = os.path.basename(REF)

# Threads
THREADS = config["threads"]


#################### 
## Desired outputs
####################

KALLISTO = expand("results/{sample}/abundance.tsv",sample=SAMPLES)
PSEUDOBAMS = expand("results/kallisto/{sample}/aln.bam",sample=SAMPLES)

rule all:
	input:
		KALLISTO,
		PSEUDOBAMS
	message:"all done"

#######################################
## Kallisto (pseudo-alignment) analysis
#######################################
## Generate pseudobam format
#kallisto quant -i index -o out --pseudobam r1.fastq r2.fastq | samtools view -Sb - > out.bam
rule kallisto_pseudobam:
    input:
        index = "index/" + REF_BASENAME + ".kidx",
        forward = lambda wildcards: config["fastqdir"] + config["samples"][wildcards.sample]["forward"],
        reverse = lambda wildcards: config["fastqdir"] + config["samples"][wildcards.sample]["reverse"]
    output:
        "results/kallisto/{sample}/aln.bam"
    message:"computing {wildcards.sample} pseudo BAM file using kallisto"
    params:"results/{sample}/"
    shell:
        "kallisto quant -i {input.index} "
        "--output-dir {params} "
        "--pseudobam "
        "{input.forward} {input.reverse} |samtools view -Sb - > {output}"

## Estimate abundances
rule kallisto_abundances:
    input:
        index = "index/" + REF_BASENAME + ".kidx",
        forward = lambda wildcards: config["fastqdir"] + config["samples"][wildcards.sample]["forward"],
        reverse = lambda wildcards: config["fastqdir"] + config["samples"][wildcards.sample]["reverse"]
    output:
        "results/{sample}/abundance.tsv"
    message:"computing {wildcards.sample} abundances using kallisto"
    params:"results/{sample}/"
    log:"results/kallisto_logs/{sample}.log.txt"
    shell:
        "kallisto quant -i {input.index} "
        "--output-dir {params} "
        "-b 100 "
        "--threads {THREADS} "
        " --seed=42 "
        "{input.forward} {input.reverse} "
        " 2>{log}"

#################
## Kallisto index
#################
rule create_kallisto_index:
    input:
        REF
    output:
        "index/" + REF_BASENAME + ".kidx"
    message:"creating kallisto index using {input}"
    params:
        REF_BASENAME + ".kidx"
    shell:
        "kallisto index -i {params} {input};"
        "mv {params} index/" 


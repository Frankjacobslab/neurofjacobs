# Snakefile
# Tells which files to generate as specified by the rule 'all'


# Snakefile to quality check and estimate counts from RNA-Seq data on a reference genome (e.g. human genome hg19)
# Tells which files to generate as specified by the rule 'all'

#########################
## Pipeline configuration
#########################
configfile: "config.yaml"

##################
## Desired outputs
##################


rule all:
	input:
		expand("fastqc/{sample}_{orientation}/fastqc_data.txt",sample=config["samples"],orientation=["forward","reverse"])
	message: "RNA-Seq pipeline has been successfully run"


################################
## Fastqc reports after trimming
################################

###########
## Trimming
###########


#################################
## Fastqc reports before trimming
#################################
rule fastqc_before_trimming:
    input:
        forward = lambda wildcards: config["fastqdir"] + config["samples"][wildcards.sample]["forward"],
        reverse = lambda wildcards: config["fastqdir"] + config["samples"][wildcards.sample]["reverse"]
    output:
        "fastqc/{sample}_{orientation}/fastqc_data.txt"
    message:"generating fastqc report for {wildcards.sample}"
    shell:
        "mkdir -p fastqc/;"
        "fastqc --outdir=fastqc/{wildcards.sample}_forward/ {input.forward};"
        "fastqc --outdir=fastqc/{wildcards.sample}_reverse/  {output.reverse};"

#	fastqc seqfile1 seqfile2 .. seqfileN#
#
 #   fastqc [-o output dir] [--(no)extract] [-f fastq|bam|sam] 
 #          [-c contaminant file] seqfile1 .. seqfileN      

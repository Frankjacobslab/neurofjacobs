# Snakefile
# Tells which files to generate as specified by the rule 'all'

# Snakefile to quality check and estimate counts from RNA-Seq data on a reference genome (e.g. human genome hg19)
# Tells which files to generate as specified by the rule 'all'

import os

#########################
## Pipeline configuration
#########################

# configuration file
configfile: "config.yaml"

# Number of CPU (threads)
THREADS = 1

# Trimmomatic
ADAPTERFILE = config["trimmomatic"]["adapters"]
TRIMMOMATIC = config["trimmomatic"]["jarfile"]

##################
## Desired outputs
##################
FASTQC_REPORTS = expand("fastqc/trimmed/{sample}/{pair}/{sample}_{pair}_fastqc.html",sample=config["samples"],pair=["forward","reverse"])

STAR2PASS = "./star2pass/chrLength.txt"

rule all:
	input:
		STAR2PASS
	message: "RNA-Seq pipeline has been successfully run"

########################
## version documentation
########################



#####################################################################
## STAR 2-pass (genome indexing, splice junctions database generation 
#####################################################################
rule star2pass_index:
    input:
        sjdb = "./star1pass/SJ.concatenated.out.tab",
        directory = "./star2pass/", 
        ref= config["refseqs"]["genomefasta"],
        gtf = config["annotations"]["gtf4genes"]
    output:
        STAR_2PASS = ["./star2pass/"+f for f in ["chrLength.txt","chrNameLength.txt","chrName.txt","chrStart.txt","Genome","genomeParameters.txt","SA","SAindex"]]
    message: "STAR 2nd pass: generating genome index"	
    shell:
        "STAR --runMode genomeGenerate "
        "--genomeDir {input.directory} "
        "--genomeFastaFiles {input.ref} "
        "--runThreadN {THREADS} "
        "--sjdbFileChrStartEnd {input.sjdb} "
        "--sjdbOverhang 99 "
        "--sjdbGTFfile {input.gtf};"
        "touch -h {output}"

rule create_star2pass_directory:
    output:"./star2pass/"
    message:"create directory for star2pass"
    shell:"mkdir -p ./star2pass/"

rule concatenate_sjdb:
    input:
        expand("./star1pass/{sample}_SJ.out.tab",sample=config["samples"].keys()),
    output:
        "./star1pass/SJ.concatenated.out.tab"
    message:"concatenating splice junctions from different samples "
    shell:"cat {input} >> {output}"

rule star1pass_align:
    input:
        forward = "/zfs/scratch/mgalland_temp/neuro/trimmed/{sample}_forward.fastq",
        reverse = "/zfs/scratch/mgalland_temp/neuro/trimmed/{sample}_reverse.fastq", 
        ref = "star_index/"
    output:
        "./star1pass/{sample}_SJ.out.tab"
    message:"STAR 1st pass: aligning {wildcards.sample} reads to generate splice junction files"
    params:"./star1pass/{sample}_"	
    shell: 		
        "STAR --runMode alignReads "
        "--genomeDir {input.ref} "
        "--readFilesIn {input.forward} {input.reverse} "
        "--outFileNamePrefix {params} "
        "--outFilterIntronMotifs RemoveNoncanonical "
        "--runThreadN {THREADS}"

 # sdjbOverhang specifies the length of the genomic sequence around the annotated junction to be used in constructing the splie junctions database. Ideally this length should be equal to ReadLength-1
rule star_genome_index:
    input:
        genome = config["refseqs"]["genomefasta"],
        gtf = config["annotations"]["gtf4genes"]
    output:
        "star_index/"
    message:"generation STAR genome index" 
    params:"star_index/"
    shell:
        "STAR --runMode genomeGenerate "
        "--genomeDir {params} "
        "--genomeFastaFiles {input.genome} "
        "--runThreadN {THREADS} "
        "--sjdbOverhang 99 "
        "-sjdbGTFfile {input.gtf}"

################################
## Fastqc reports after trimming
################################
rule fastqc_after_trimming:
    input:
        "/zfs/scratch/mgalland_temp/neuro/trimmed/{sample}_{pair}.fastq"
    output:
        "fastqc/trimmed/{sample}/{pair}/{sample}_{pair}_fastqc.html"
    message:"generating fastqc report for trimmed reverse {wildcards.sample} reads"
    params:
        "fastqc/trimmed/{sample}/{pair}/"
    shell:"fastqc --threads {THREADS} --outdir={params} {input}"
    

###########
## Trimming
###########
rule trimmomaticPaired:
    input:
        ADAPTERFILE,
        forward = lambda wildcards: config["fastqdir"] + config["samples"][wildcards.sample]["forward"],
        reverse = lambda wildcards: config["fastqdir"] + config["samples"][wildcards.sample]["reverse"]
    output:
        forward = "/zfs/scratch/mgalland_temp/neuro/trimmed/{sample}_forward.fastq",
        reverse = "/zfs/scratch/mgalland_temp/neuro/trimmed/{sample}_reverse.fastq",
        forwardUnpaired  = "/zfs/scratch/mgalland_temp/neuro/trimmed/{sample}_forward_unpaired.fastq",
        reverseUnpaired = "/zfs/scratch/mgalland_temp/neuro/trimmed/{sample}_reverse_unpaired.fastq",
    message:"Trimming {wildcards.sample} using Trimmomatic"
    log:"results/trimlogs/{wildcards.sample}_{wildcards.pair}.trimlog"
    params :
        seedMisMatches =            str(config['trimmomatic']['seedMisMatches']),
        palindromeClipTreshold =    str(config['trimmomatic']['palindromeClipTreshold']),
        simpleClipThreshhold =      str(config['trimmomatic']['simpleClipThreshold']),
        LeadMinTrimQual =           str(config['trimmomatic']['LeadMinTrimQual']),
        TrailMinTrimQual =          str(config['trimmomatic']['TrailMinTrimQual']),
        windowSize =                str(config['trimmomatic']['windowSize']),
        avgMinQual =                str(config['trimmomatic']['avgMinQual']),
        minReadLen =                str(config['trimmomatic']['minReadLength']),
        phred = 		    str(config["trimmomatic"]["phred"])
    shell:
        "java -jar {TRIMMOMATIC} PE {params.phred} -threads {THREADS} "
        "{input.forward} {input.reverse} "
        "{output.forward} {output.forwardUnpaired} "
        "{output.reverse} {output.reverseUnpaired} "
        "ILLUMINACLIP:{ADAPTERFILE}:{params.seedMisMatches}:{params.palindromeClipTreshold}:{params.simpleClipThreshhold} "
        "LEADING:{params.LeadMinTrimQual} "
        "TRAILING:{params.TrailMinTrimQual} "
        "SLIDINGWINDOW:{params.windowSize}:{params.avgMinQual} "
        "MINLEN:{params.minReadLen}"


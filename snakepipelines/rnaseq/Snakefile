# Snakefile
# Tells which files to generate as specified by the rule 'all'


# Snakefile to quality check and estimate counts from RNA-Seq data on a reference genome (e.g. human genome hg19)
# Tells which files to generate as specified by the rule 'all'

#########################
## Pipeline configuration
#########################
configfile: "config.yaml"

# Number of CPU (threads)
THREADS = 1

# Trimmomatic
ADAPTERFILE = config["trimmomatic"]["adapters"]
TRIMMOMATIC = config["trimmomatic"]["jarfile"]

##################
## Desired outputs
##################
FASTQC_REPORTS = expand("fastqc/trimmed/{sample}_{orientation}/fastqc_data.txt",sample=config["samples"],orientation=["forward","reverse"])


rule all:
	input:
		FASTQC_REPORTS
	message: "RNA-Seq pipeline has been successfully run"

########################
## version documentation
########################


################################
## Fastqc reports after trimming
################################
rule fastqc_after_trimming:
    input:
        forward = "/zfs/scratch/mgalland_temp/neuro/trimmed/{sample}_R1.fastq",
        reverse = "/zfs/scratch/mgalland_temp/neuro/trimmed/{sample}_R2.fastq"
    output:
        "fastqc/trimmed/{sample}_{orientation}/fastqc_data.txt"
    message:"generating fastqc report for trimmed forward and reverse {wildcards.sample} reads"
    params:
        forward = "fastqc/trimmed/{wildcards.sample}_forward/",
        reverse = "fastqc/trimmed/{wildcards.sample}_reverse/"
    run:
        # keep the shell() command as fastqc does not support line return
        shell("fastqc --threads {THREADS} --outdir={params.forward} {input.forward}") 
        shell("fastqc --threads {THREADS} --outdir={params.reverse} {output.reverse}")

###########
## Trimming
###########
rule trimmomaticPaired:
    input:
        ADAPTERFILE,
        forward = lambda wildcards: config["fastqdir"] + config["samples"][wildcards.sample]["forward"],
        reverse = lambda wildcards: config["fastqdir"] + config["samples"][wildcards.sample]["reverse"]
    output:
        forward = "/zfs/scratch/mgalland_temp/neuro/trimmed/{sample}_R1.fastq",
        reverse = "/zfs/scratch/mgalland_temp/neuro/trimmed/{sample}_R2.fastq",
        forwardUnpaired  = "/zfs/scratch/mgalland_temp/neuro/trimmed/{sample}_R1_unpaired.fastq",
        reverseUnpaired = "/zfs/scratch/mgalland_temp/neuro/trimmed/{sample}_R2_unpaired.fastq",
        log = "results/trimlogs/{sample}.txt"
    message:"Trimming {wildcards.sample} using Trimmomatic"
    params :
        seedMisMatches =            str(config['trimmomatic']['seedMisMatches']),
        palindromeClipTreshold =    str(config['trimmomatic']['palindromeClipTreshold']),
        simpleClipThreshhold =      str(config['trimmomatic']['simpleClipThreshold']),
        LeadMinTrimQual =           str(config['trimmomatic']['LeadMinTrimQual']),
        TrailMinTrimQual =          str(config['trimmomatic']['TrailMinTrimQual']),
        windowSize =                str(config['trimmomatic']['windowSize']),
        avgMinQual =                str(config['trimmomatic']['avgMinQual']),
        minReadLen =                str(config['trimmomatic']['minReadLength']),
        phred = 		    str(config["trimmomatic"]["phred"])
    shell:
        "java -jar {TRIMMOMATIC} PE {params.phred} -threads {THREADS} "
        "{input.forward} {input.reverse} "
        "{output.forward} {output.forwardUnpaired} "
        "{output.reverse} {output.reverseUnpaired} "
        "ILLUMINACLIP:{ADAPTERFILE}:{params.seedMisMatches}:{params.palindromeClipTreshold}:{params.simpleClipThreshhold} "
        "LEADING:{params.LeadMinTrimQual} "
        "TRAILING:{params.TrailMinTrimQual} "
        "SLIDINGWINDOW:{params.windowSize}:{params.avgMinQual} "
        "MINLEN:{params.minReadLen}"

